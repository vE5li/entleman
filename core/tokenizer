#comment_tokenizer {
    #note {
        "TODO "         todo
        "FIX "          fix
        "WIP "          wip
    }
    #block_comment  [ "@@" "@@" ]
    #line_comment   '@'
}

#number_tokenizer {
    #format {
        #none {
            #none           decimal
            'D'             decimal
            'B'             binary
            'Z'             duodecimal
            'X'             hexadecimal
        }
    }
    #system {
        binary          [ '0' '1'                                                         ]
        decimal         [ '0' '1' '2' '3' '4' '5' '6' '7' '8' '9'                         ]
        duodecimal      [ '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'X' 'E'                 ]
        hexadecimal     [ '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F' ]
    }
    #float          '.'
    @#spacer         '_' @ needs to be non-blocking
}

#character_tokenizer {
    #replace {
        "null"          '\0'
        "backslash"     '\\'
        "backspace"     '\b'
        "character"     '\''
        "string"        '\"'
        "newline"       '\n'
        "tab"           '\t'
        "return"        '\r'
        "escape"        '\e'
        "open"          '{'
        "close"         '}'
    }
    #delimiter      [ '\'' '\'' ]
}

#string_tokenizer {
    #replace {
        "{null}"        '\0'
        "{backslash}"   '\\'
        "{backspace}"   '\b'
        "{character}"   '\''
        "{string}"      '\"'
        "{newline}"     '\n'
        "{tab}"         '\t'
        "{return}"      '\r'
        "{escape}"      '\e'
        "{open}"        '{'
        "{close}"       '}'
    }
    #delimiter      [ '\"' '\"' ]
}

#operator_tokenizer {
    #translate {
        "::+"           right_offset_plus
        "::-"           right_offset_minus
        "+::"           left_offset_plus
        "-::"           left_offset_minus
        "=="            equals
        "!="            not_equals
        ":="            assign
        "+="            add_assign
        "-="            subtract_assign
        "/="            divide_assign
        "*="            multiply_assign
        "&="            and_assign
        "|="            or_assign
        "^="            xor_assign
        "||"            logical_or
        "^^"            logical_xor
        "&&"            logical_and
        ">="            not_smaller
        "<="            not_bigger
        "<<"            shift_left
        ">>"            shift_right
        '>'             bigger
        '<'             smaller
        '+'             add
        '-'             subtract
        '/'             divide
        '*'             multiply
        '|'             or
        '&'             and
        '^'             xor
        '%'             modulo
        '{'             open_curly
        '}'             close_curly
        '('             open_round
        ')'             close_round
        '['             open_square
        ']'             close_square
        '#'             directive
        '?'             condition
        '~'             concatinate
        '!'             invert
        ':'             type
        ','             comma
        '.'             dot
    }
    #ignored        [ '\r' '\t' '\n' ' ' ]
    #invalid        [ '\\' ';' '=' ]
}

#keyword_tokenizer {
    #translate {
        module          module
        constant        constant
        component       component
        true            true
        false           false
        type            type
        in              in
        out             out
        any             any
        as              as
    }
}

#identifier_tokenizer {
    #type_prefix     [ _ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ]
    #prefix          [ _ a b c d e f g h i j k l m n o p q r s t u v w x y z ]
}
